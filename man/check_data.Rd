% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_data.R
\name{check_data}
\alias{check_data}
\alias{show_warnings}
\alias{show_failures}
\alias{print.phoenix_data_check}
\title{Checking Data Assumptions for Phoenix}
\usage{
check_data(
  pf_ratio = NA_real_,
  sf_ratio = NA_real_,
  pao2 = NA_real_,
  spo2 = NA_real_,
  fio2 = NA_real_,
  imv = NA_integer_,
  other_respiratory_support = NA_integer_,
  vasoactives = NA_integer_,
  dopamine = NA_integer_,
  dobutamine = NA_integer_,
  epinephrine = NA_integer_,
  norepinephrine = NA_integer_,
  milrinone = NA_integer_,
  vasopressin = NA_integer_,
  lactate = NA_real_,
  age = NA_real_,
  sbp = NA_real_,
  dbp = NA_real_,
  map = NA_real_,
  platelets = NA_real_,
  inr = NA_real_,
  d_dimer = NA_real_,
  fibrinogen = NA_real_,
  gcs = NA_real_,
  fixed_pupils = NA_real_,
  glucose = NA_real_,
  anc = NA_real_,
  alc = NA_real_,
  creatinine = NA_real_,
  bilirubin = NA_real_,
  alt = NA_real_,
  data = parent.frame()
)

show_warnings(x, test)

show_failures(x, test)

\method{print}{phoenix_data_check}(x, full_report = FALSE, ...)
}
\arguments{
\item{pf_ratio}{numeric vector for the PaO2/FiO2 ratio; PaO2 = arterial oxygen pressure; FiO2 = fraction of inspired oxygen;  PaO2 is measured in mmHg and FiO2 is from 0.21 (room air) to 1.00.}

\item{sf_ratio}{numeric vector for the SpO2/FiO2 ratio; SpO2 = oxygen saturation, measured in a percent; ratio for 92\% oxygen saturation on room air is 92/0.21 = 438.0952.}

\item{pao2}{numeric vector,  PaO2 is the arterial oxygen pressure measured in
mmHg}

\item{spo2}{numeric vector, SpO2 is oxygen saturation, measured in as a
percent, expected values are integer values between 0 and 100.  A warning
will be given for values between 0 and 1 along with any value outside of 0 to
100.  A warning is also given for values exceeding 97 as sf_ratio is only
valid for use in Phoenix if SpO2 is less than or equal to 97.}

\item{fio2}{numeric vector,  FiO2 is the fraction of inspired oxygen with
expected values between 0.21 (room air) to 1.00.}

\item{imv}{invasive mechanical ventilation; numeric or integer vector, (0 = not intubated; 1 = intubated)}

\item{other_respiratory_support}{other respiratory support; numeric or integer vector, (0 = no support; 1 = support)}

\item{vasoactives}{an integer vector, the number of systemic vasoactive medications being administered to the patient.  Six vasoactive medications are considered: dobutamine, dopamine, epinephrine, milrinone, norepinephrine, vasopressin.}

\item{dopamine, dobutamine, epinephrine, norepinephrine, milrinone, vasopressin}{integer valued indicator columns for receipt of the specific vasoactive
medication}

\item{lactate}{numeric vector with the lactate value in mmol/L}

\item{age}{numeric vector age in months}

\item{sbp, dbp}{numeric vectors for systolic and diastolic blood pressure in
mmHg.}

\item{map}{numeric vector, mean arterial pressure in mmHg}

\item{platelets}{numeric vector for platelets counts in units of 1,000/uL (thousand per microliter)}

\item{inr}{numeric vector for the international normalised ratio blood test}

\item{d_dimer}{numeric vector for D-Dimer, units of mg/L FEU}

\item{fibrinogen}{numeric vector units of mg/dL}

\item{gcs}{integer vector; total Glasgow Comma Score}

\item{fixed_pupils}{integer vector; 1 = bilaterally fixed pupil, 0 = otherwise}

\item{glucose}{numeric vector; blood glucose measured in mg/dL}

\item{anc}{absolute neutrophil count; a numeric vector; units of 1,000 cells per cubic millimeter}

\item{alc}{absolute lymphocyte count; a numeric vector; units of 1,000 cells per cubic millimeter}

\item{creatinine}{numeric vector; units of mg/dL}

\item{bilirubin}{numeric vector; units of mg/dL}

\item{alt}{alanine aminotransferase; a numeric vector; units of IU/L}

\item{data}{a \code{list}, \code{data.frame}, or \code{environment} containing the input vectors}

\item{x}{a \code{phoenix_data_check} object}

\item{test}{the name or index of the test you want}

\item{full_report}{when \code{TRUE} print all tests.  When \code{FALSE} print
only non-skipped tests.}

\item{...}{pass through}
}
\value{
\code{check_data} returns a \code{phoenix_data_check} object.  This
is a list of tests and a \code{data.frame} called "considered_data" which is
the effective data set considered.  This is an important distinction.  Say
you check \code{sf_ratio = spo2/fio2}.  The \code{check_data} will only check
the assuptions around sf_ration specifically, and will not check assumptions
about spo2 or fio2.  To get checks of all three you will need to specify all
three in the call to \code{check_data}.
}
\description{
A suite of tests for identifying potentially invalid data values in the
input data for Phoenix scoring.
}
\examples{
################################################################################
# EXAMPLE 1
#
# Let's check the requirments for spo2, fio2, and sf_ratio
#
# Start with a large set of spo2 and fio2 values.  This includes impossible
# values.
DF <-
  expand.grid(spo2 = c(seq(-1, 101, by = 1), NA_real_, 0.89, 0.98),
              fio2 = c(seq(0.20, 1.01, by = 0.01), NA_real_))

# build a vector of sf_ratio
DF[["sf_ratio"]] <- with(DF, spo2/fio2)

# Let's add some noise to the sf_ratio for some cases
# record the old random seed so we can reset the random number generator after
# this example
if (!exists(".Random.seed", envir = .GlobalEnv)) runif(1)
oldseed <- .Random.seed
set.seed(42)

idx <- which(!is.na(DF[["sf_ratio"]]))
idx <- sample(idx, size = floor(0.1 * length(idx)))
DF[["sf_ratio"]][idx] <- DF[["sf_ratio"]][idx] + rnorm(n = length(idx))

# add some sf_ratios where the spo2 or fio2 is NA
idx <- which(is.na(DF[["sf_ratio"]]))
idx <- sample(idx, size = floor(0.5 * length(idx)))
DF[["sf_ratio"]][idx] <- runif(n = length(idx), min = 0, max = 100/0.21)
DF[["sf_ratio"]][max(idx)] <- DF[["sf_ratio"]][max(idx)] + 1

# reset the random number generator
.Random.seed <- oldseed

# Now, let's check the data
chk <-
  check_data(fio2 = fio2, spo2 = spo2, sf_ratio = sf_ratio, data = DF)

chk
print(chk, full_report = TRUE)
summary(chk)

sw <- show_warnings(chk, test = "0 <= spo2 <= 100")
head(sw)
summary(sw)
unique(sw$spo2)

sf <- show_failures(chk, test = "0 <= spo2 <= 100")
head(sf)
summary(sf)
unique(sf$spo2)

# If you want to get the indices for the considered data where the test failed:
idx <- chk[["0 <= spo2 <= 100"]]$fail
head(DF[idx, ])

################################################################################
# Example 2
#
# Use the example sepsis data set provided in the phoenix package
#
# We'll focus on the elements needed for respiratory scoring.  The sepsis data
# set only has FiO2, PaO2, SpO2, and an indicator for invasive mechanical
# ventilation.  We need to build the pf_ratio, the sf_ratio, and the
# other_respiratory_support vectors.
#
# Start by checking the data that is provided.  All the checks pass.
chk <- check_data(fio2 = fio2, pao2 = pao2, spo2 = spo2, imv = vent, data = sepsis)
summary(chk)

# Let's add on a definition for other_respiratory_support
chk <- check_data(fio2 = fio2,
                  pao2 = pao2,
                  spo2 = spo2,
                  imv = vent,
                  other_respiratory_support = as.integer(fio2 > 0.21),
                  data = sepsis)
summary(chk)

# A useful feature of check_data is that it will return the "considered_data"
# which will have the vector for other_respiratory_support now
head(chk$considered_data)

# Let's build the pf_ratio,  no warnings, no failed tests.
chk <- check_data(fio2 = fio2,
                  pao2 = pao2,
                  spo2 = spo2,
                  imv = vent,
                  other_respiratory_support = as.integer(fio2 > 0.21),
                  pf_ratio = pao2 / fio2,
                  data = sepsis)
summary(chk)

# Build the sf_ratio, we now have tests with warnings and failures
chk <- check_data(fio2 = fio2,
                  pao2 = pao2,
                  spo2 = spo2,
                  imv = vent,
                  other_respiratory_support = as.integer(fio2 > 0.21),
                  pf_ratio = pao2 / fio2,
                  sf_ratio = spo2 / fio2,
                  data = sepsis)
summary(chk)

chk
show_failures(chk, test = "(spo2 <= 97) | (spo2 > 97 & is.na(sf_ratio))")

# The problem is that SpO2 > 97 which makes the sf_ratio invalid for phoenix
# scoring. See references for details.

# Let's improve the definition for the sf_ratio.  This will remove the notice of
# a failed test, but will retain the warning of a spo2 value greater than 97.
chk <- check_data(fio2 = fio2,
                  pao2 = pao2,
                  spo2 = spo2,
                  imv = vent,
                  other_respiratory_support = as.integer(fio2 > 0.21),
                  pf_ratio = pao2 / fio2,
                  sf_ratio = ifelse(spo2 <= 97, spo2 / fio2, NA_real_),
                  data = sepsis)
chk
summary(chk)
show_warnings(chk, test = "(spo2 <= 97) | (spo2 > 97 & is.na(sf_ratio))")
show_failures(chk, test = "(spo2 <= 97) | (spo2 > 97 & is.na(sf_ratio))")

################################################################################
# The Full sepsis data set and check
chk <- check_data(fio2 = fio2,
                  pao2 = pao2,
                  spo2 = spo2,
                  imv = vent,
                  other_respiratory_support = as.integer(fio2 > 0.21),
                  pf_ratio = pao2 / fio2,
                  sf_ratio = ifelse(spo2 <= 97, spo2 / fio2, NA_real_),
                  age = age,
                  vasoactives = dopamine + dobutamine + epinephrine + norepinephrine + milrinone + vasopressin,
                  dopamine = dopamine,
                  dobutamine = dobutamine,
                  epinephrine = epinephrine,
                  norepinephrine = norepinephrine,
                  milrinone = milrinone,
                  vasopressin = vasopressin,
                  lactate = lactate,
                  sbp = sbp,
                  dbp = dbp,
                  map = map(sbp, dbp),
                  platelets = platelets,
                  inr = inr,
                  d_dimer = d_dimer,
                  fibrinogen = fibrinogen,
                  gcs = gcs_total,
                  fixed_pupils = as.integer(pupil == "both-fixed"),
                  glucose = glucose,
                  anc = anc,
                  alc = alc,
                  creatinine = creatinine,
                  bilirubin = bilirubin,
                  alt = alt,
                  data = sepsis)

summary(chk)
print(chk, full_report = TRUE)
#show_failures(chk, 21)
}
